#include <iostream>
#include <string>

using namespace std;

int main(void)
{

    // Array with all Cisco encryption keys. Source - unknown (perhabs, leakage from Cisco or reverse)
    const int Keys_array[] = 
    { 0x64, 0x73, 0x66, 0x64, 0x3b, 0x6b, 0x66, 0x6f,
      0x41, 0x2c, 0x2e, 0x69, 0x79, 0x65, 0x77, 0x72,
      0x6b, 0x6c, 0x64, 0x4a, 0x4b, 0x44, 0x48, 0x53,
      0x55, 0x42, 0x73, 0x67, 0x76, 0x63, 0x61, 0x36,
      0x39, 0x38, 0x33, 0x34, 0x6e, 0x63, 0x78, 0x76,
      0x39, 0x38, 0x37, 0x33, 0x32, 0x35, 0x34, 0x6b,
      0x3b, 0x66, 0x67, 0x38, 0x37, 0x64, 0x73, 0x66,
      0x64, 0x3b, 0x6b, 0x66, 0x6f, 0x41, 0x2c, 0x2e,
      0x69, 0x79, 0x65, 0x77, 0x72, 0x6b, 0x6c, 0x64,
      0x4a, 0x4b, 0x44, 0x48, 0x53, 0x55, 0x42, 0x73,
      0x67, 0x76, 0x63, 0x61, 0x36, 0x39, 0x38, 0x33,
      0x34, 0x6e, 0x63, 0x78, 0x76, 0x39, 0x38, 0x37,
      0x33, 0x32, 0x35, 0x34, 0x6b, 0x3b, 0x66, 0x67,
      0x38, 0x37 };

    string Encr_passwd, Decr_passwd;

    cout << "Enter encrypted key in Cisco Type-7 format: ";
    cin >> Encr_passwd;

    // Calculate password length using its structure
    int Passwd_length = (Encr_passwd.length()) / 2;

    // Decompositing encrypted password to symbols
    string* Letters = new string[Passwd_length];

    int j = 0;
    for (int i = 0; i < Encr_passwd.length(); i += 2) {
        Letters[j] = Encr_passwd.substr(i, 2);        
        j++;
    }

    // Decryption process
    int Curr_key = stoi(Letters[0]);        // First key calculation
   
    for (int i = 1; i < Passwd_length; i++) {
        Decr_passwd += stoi(Letters[i], nullptr, 16) ^ Keys_array[Curr_key];    // Current encrypted password symbol XOR current decryption key
        Curr_key++;     // Incrementing index of keys array
    }

    cout << "Decrypted password: " << Decr_passwd << endl;
    
    delete [] Letters;

    cout << endl << "Enter any case to close the program" << endl;      // Technical pause
    cin >> Passwd_length;  

    return 0;

}
